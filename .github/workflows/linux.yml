name: Linux Build

on:
  # push:
  #   branches:
  #     - devwin
  # pull_request:
  #   branches:
  #     - devwin
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-24.04
    container:
      image: debian:12
    steps:
    - name: Install git
      run: |
        apt-get update
        apt-get install -y git

    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y cmake build-essential pkg-config ninja-build
        apt-get install -y autoconf libtool libgflags-dev libgtest-dev
        apt-get install -y libc-ares-dev libyaml-cpp-dev uuid-dev
        apt-get install -y protobuf-compiler libprotobuf-dev
        apt-get install -y libgrpc++-dev libgrpc-dev protobuf-compiler-grpc
        apt-get install -y libpulse-dev pulseaudio
        apt-get install -y nlohmann-json3-dev
        apt-get install -y libcurl4-openssl-dev

    # - name: Build sherpa-onnx
    #   run: |
    #     cd dep/sherpa-onnx
    #     mkdir -p build && cd build
    #     export CC=gcc
    #     export CXX=g++
    #     cmake -DCMAKE_INSTALL_PREFIX=./install \
    #           -DCMAKE_BUILD_TYPE=Release \
    #           -DBUILD_SHARED_LIBS=ON \
    #           -DSHERPA_ONNX_ENABLE_C_API=ON \
    #           -DSHERPA_ONNX_ENABLE_CXX_API=ON \
    #           -DSHERPA_ONNX_ENABLE_PYTHON=OFF \
    #           -DSHERPA_ONNX_ENABLE_TESTS=OFF \
    #           -DSHERPA_ONNX_ENABLE_CHECK=OFF \
    #           -DSHERPA_ONNX_ENABLE_PORTAUDIO=OFF \
    #           -DSHERPA_ONNX_ENABLE_WEBSOCKET=OFF \
    #           -DSHERPA_ONNX_ENABLE_JNI=OFF \
    #           -DSHERPA_ONNX_ENABLE_BINARY=OFF \
    #           -DSHERPA_ONNX_USE_PRE_INSTALLED_ONNXRUNTIME_IF_AVAILABLE=ON \
    #           ..
    #     make VERBOSE=1 -j$(nproc)
    #     make install
    #     cd ../../..

    - name: Configure
      run: |
        export CC=gcc
        export CXX=g++
        mkdir build && cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake" \
          ..

    - name: Build
      run: cd build && ninja -v

    - name: Package artifacts
      run: |
        cd build
        cpack -G TGZ

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
          name: voice-assistant-linux
          path: build/voice-assistant-*.tar.gz 
          retention-days: 3