name: Windows Build

on:
  workflow_call:
  push:
    branches:
      - lint
  pull_request:
    branches:
      - lint

jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          E:\vcpkg
          !E:\vcpkg\.git
        key: vcpkg-${{ hashFiles('**/vcpkg.json', '**/CMakeLists.txt') }}-${{ hashFiles('.github/workflows/windows.yml') }}
        restore-keys: |
          vcpkg-

    - name: Cache sherpa-onnx build
      uses: actions/cache@v3
      with:
        path: |
          dep/sherpa-onnx/build
        key: sherpa-onnx-${{ hashFiles('dep/sherpa-onnx/**') }}-${{ hashFiles('.github/workflows/windows.yml') }}
        restore-keys: |
          sherpa-onnx-

    - name: Set PowerShell execution policy
      shell: cmd
      run: powershell Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force

    - name: Install and setup vcpkg
      shell: cmd
      run: |
        if not exist "E:\vcpkg" (
          git clone https://github.com/Microsoft/vcpkg.git E:\vcpkg
          cd /d E:\vcpkg
          .\bootstrap-vcpkg.bat
        )
        setx PATH "%PATH%;E:\vcpkg"
        set PATH=%PATH%;E:\vcpkg

    - name: Install dependencies
      shell: cmd
      run: |
        cd /d E:\vcpkg
        .\vcpkg install grpc:x64-windows
        .\vcpkg install protobuf:x64-windows
        .\vcpkg install gtest:x64-windows
        .\vcpkg install onnxruntime-gpu:x64-windows
        .\vcpkg install nlohmann-json:x64-windows
        .\vcpkg install yaml-cpp:x64-windows
        .\vcpkg integrate install
        if not exist C:\Windows\System32\protoc.exe copy E:\vcpkg\installed\x64-windows\tools\protobuf\protoc.exe C:\Windows\System32\
        if not exist C:\Windows\System32\grpc_cpp_plugin.exe copy E:\vcpkg\installed\x64-windows\tools\grpc\grpc_cpp_plugin.exe C:\Windows\System32\

    - name: Build sherpa-onnx
      shell: cmd
      run: |
        cd dep\sherpa-onnx
        if not exist build mkdir build
        cd build
        if not exist CMakeCache.txt (
          cmake -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_TOOLCHAIN_FILE="E:/vcpkg/scripts/buildsystems/vcpkg.cmake" ^
          -DCMAKE_INSTALL_PREFIX="./install" ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DBUILD_SHARED_LIBS=ON ^
          -DSHERPA_ONNX_ENABLE_C_API=ON ^
          -DSHERPA_ONNX_ENABLE_CXX_API=ON ^
          -DSHERPA_ONNX_ENABLE_PYTHON=OFF ^
          -DSHERPA_ONNX_ENABLE_TESTS=OFF ^
          -DSHERPA_ONNX_ENABLE_CHECK=OFF ^
          -DSHERPA_ONNX_ENABLE_PORTAUDIO=OFF ^
          -DSHERPA_ONNX_ENABLE_WEBSOCKET=OFF ^
          -DSHERPA_ONNX_ENABLE_JNI=OFF ^
          -DSHERPA_ONNX_ENABLE_BINARY=OFF ^
          -DSHERPA_ONNX_USE_PRE_INSTALLED_ONNXRUNTIME_IF_AVAILABLE=ON ^
          ..
        )
        cmake --build . --config Release
        cmake --install . --config Release
        cd ..\..

    - name: Configure
      shell: cmd
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 17 2022" -A x64 ^
        -DCMAKE_TOOLCHAIN_FILE="E:/vcpkg/scripts/buildsystems/vcpkg.cmake" ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCMAKE_PREFIX_PATH="E:/vcpkg/installed/x64-windows;%GITHUB_WORKSPACE%/dep/sherpa-onnx/build/install" ^
        -DGRPC_CPP_PLUGIN_PATH="E:/vcpkg/installed/x64-windows/tools/grpc/grpc_cpp_plugin.exe" ^
        ..

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake --build . --config Release

    - name: Package artifacts
      shell: cmd
      run: |
        mkdir artifacts\bin artifacts\lib artifacts\include artifacts\config
        
        REM Copy main executables
        copy build\src\Release\voice_server.exe artifacts\bin\
        copy build\src\Release\test_client.exe artifacts\bin\
        copy build\src\Release\streaming_client.exe artifacts\bin\
        copy build\src\audio_recorder\Release\audio_recorder_app.exe artifacts\bin\
        copy build\test\Release\voice_recognition_test.exe artifacts\bin\
        
        REM Copy configuration templates
        copy config\config.yaml.template artifacts\config\
        copy src\audio_recorder\README*.md artifacts\config\
        
        REM Copy sherpa-onnx files
        xcopy /E /I dep\sherpa-onnx\build\install\bin artifacts\bin
        xcopy /E /I dep\sherpa-onnx\build\install\lib artifacts\lib
        xcopy /E /I dep\sherpa-onnx\build\install\include artifacts\include
        
        REM Copy system dependencies
        copy E:\vcpkg\installed\x64-windows\bin\*.dll artifacts\bin\

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-artifacts
        path: artifacts/ 